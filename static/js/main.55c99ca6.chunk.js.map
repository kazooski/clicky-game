{"version":3,"sources":["component/Image/image.js","component/Navbar/index.js","component/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","class","onClick","scoreCount","id","alt","src","image","Navbar","gamestate","score","topScore","Header","App","state","posters","endGame","setState","console","log","this","forEach","poster","clicked","alert","find","o","i","sort","Math","random","className","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+xCAaeA,G,MAVD,SAAAC,GAAK,OACf,yBAAKC,MAAM,iBAAiBC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC9D,yBAAKH,MAAM,cACP,yBAAKI,IAAKL,EAAMK,IAAKC,IAAKN,EAAMO,Y,MCQ7BC,MAVf,SAAgBR,GACZ,OACI,yBAAKC,MAAM,+CACP,yBAAKA,MAAM,iBAAX,eACA,yBAAKA,MAAM,kBAAkBD,EAAMS,WACnC,yBAAKR,MAAM,kBAAX,UAAoCD,EAAMU,MAA1C,iBAA+DV,EAAMW,SAArE,O,MCMGC,MAXf,WACI,OACI,yBAAKX,MAAM,oBACP,yBAAKA,MAAM,aACP,wBAAIA,MAAM,0BAAV,eACA,wBAAIA,MAAM,yBAAV,+E,OCkEDY,G,kNAjEbC,MAAM,CACJC,UACAL,MAAO,EACPC,SAAU,G,EAGZK,QAAU,WAWR,OAVI,EAAKF,MAAMJ,MAAQ,EAAKI,MAAMH,UAChC,EAAKM,SAAS,CAACN,SAAU,EAAKG,MAAMJ,QAAQ,WAC1CQ,QAAQC,IAAIC,KAAKN,MAAMH,aAG3B,EAAKG,MAAMC,QAAQM,SAAQ,SAAAC,GACzBA,EAAOC,QAAU,KAEnBC,MAAM,qCAAD,OAAsC,EAAKV,MAAMJ,QACtD,EAAKO,SAAS,CAACP,MAAO,KACf,G,EAGTP,WAAa,SAAAC,GACX,EAAKU,MAAMC,QAAQU,MAAK,SAACC,EAAGC,GAC1B,OAAID,EAAEtB,KAAOA,EAYJc,QAAQC,IAAI,WAXO,IAAvBJ,EAAQY,GAAGJ,SACZR,EAAQY,GAAGJ,QAAUR,EAAQY,GAAGJ,QAAU,EAC1C,EAAKN,SAAS,CAACP,MAAQ,EAAKI,MAAMJ,MAAQ,IAAI,WAC5CQ,QAAQC,IAAIC,KAAKN,MAAMJ,UAEzB,EAAKI,MAAMC,QAAQa,MAAK,kBAAMC,KAAKC,SAAW,OACvC,QAEP,EAAKd,c,uDAQF,IAAD,OACR,OACE,yBAAKe,UAAU,aACb,kBAAC,EAAD,CACErB,MAAOU,KAAKN,MAAMJ,MAClBC,SAAUS,KAAKN,MAAMH,WAEvB,kBAAC,EAAD,MACCS,KAAKN,MAAMC,QAAQiB,KAAK,SAAAV,GAAM,OAE7B,kBAAC,EAAD,CACEnB,WAAY,EAAKA,WACjBC,GAAIkB,EAAOlB,GAEXG,MAAOe,EAAOf,gB,GAvDR0B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.55c99ca6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Image = props => (\n    <div class=\"card card-chan\" onClick={() => props.scoreCount(props.id)}>\n        <div class=\"image-chan\">\n            <img alt={props.alt} src={props.image} />\n        </div>\n    </div>\n\n)\n\n\nexport default Image;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Navbar(props) {\n    return (\n        <nav class=\"navbar sticky-top navbar-light orange-theme\">\n            <div class=\"h1 float-left\">Clicky Game</div>\n            <div class=\"h4 float-right\">{props.gamestate}</div>\n            <div class=\"h4 float-right\">Score: {props.score} | Top Score: {props.topScore} </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Header() {\n    return (\n        <div class=\"card header-chan\">\n            <div class=\"card-body\">\n                <h3 class=\"card-title text-center\">Clicky Game</h3>\n                <h5 class=\"card-text text-center\">Click on an image to earn points, but don't click on any more than once!</h5>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport Image from './component/Image';\nimport Navbar from './component/Navbar';\nimport Header from './component/Header';\nimport posters from './posters.json';\nimport './App.css';\n\nclass App extends Component {\n\n  state={\n    posters,\n    score: 0,\n    topScore: 0\n  };\n\n  endGame = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({topScore: this.state.score}, function() {\n        console.log(this.state.topScore);\n      });\n    }\n    this.state.posters.forEach(poster => {\n      poster.clicked = 0;\n    });\n    alert(`You clicked on that one! \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n    return true;\n  }\n\n  scoreCount = id => {\n    this.state.posters.find((o, i) => {\n      if (o.id === id) {\n        if(posters[i].clicked === 0){\n          posters[i].clicked = posters[i].clicked + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          });\n          this.state.posters.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.endGame();\n        }\n      } else {\n        return console.log(\"nah 2.0\");\n      }\n    })\n  };\n  \n  render () {\n    return(\n      <div className=\"container\">\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Header />\n        {this.state.posters.map( poster => (\n\n          <Image \n            scoreCount={this.scoreCount}\n            id={poster.id}\n            // key={poster.id}\n            image={poster.image}\n          />\n\n        ))}\n\n      </div>\n\n    ) //return\n    \n  } //render\n} // class App\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}